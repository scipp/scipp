[tox]
isolated_build = True
envlist = test

[testenv]
skip_install = true
# Requirements to run, e.g., Python tests do not include requirements for building the
# C++ library such as cmake or conan. In particular, conan freezes some package versions
# that are also runtime requirements (pyyaml). This would be bad, since we want to
# ensure scipp works for users, i.e., with "current" library versions that they would get
# when installing. Therefore we build the library separately.
deps = -r requirements/test.txt
setenv =
  PYTHONPATH = {toxinidir}{/}install
  JUPYTER_PLATFORM_DIRS = 1
commands = python -X PYTHONWARNDEFAULTENCODING -m pytest -n auto -v {posargs:tests}

[testenv:import-minimal]
description = Test if scipp can be imported when installed with only base dependencies
deps = -r requirements/base.txt
commands = python -c 'import scipp'

[testenv:docs]
deps =
  {posargs:}
  -r requirements/docs.txt
allowlist_externals = find
setenv =
  {[testenv]setenv}
commands =
  python -m sphinx -v -b html -d doctrees docs html
  python -m sphinx -v -b doctest -d doctrees docs html
  find html -type f -name "*.ipynb" -not -path "html/_sources/*" -delete

[testenv:docs-clean]
description = Clean all the existing built objects and build them from scratch
deps = -r requirements/docs.txt
allowlist_externals = find
setenv =
  {[testenv]setenv}
commands =
  find {toxinidir}/doctrees ! -name doctrees -delete
  find {toxinidir}/html ! -name html -delete
  find {toxinidir}/docs/generated ! -name generated -delete
  python -m sphinx -v -b html -d doctrees docs html -E
  python -m sphinx -v -b doctest -d doctrees docs html -E
  find html -type f -name "*.ipynb" -not -path "html/_sources/*" -delete

[testenv:linkcheck]
description = Run Sphinx linkcheck
deps = -r requirements/docs.txt
commands =
  python -m sphinx -j4 -v -b linkcheck -d doctrees docs html

[testenv:static]
description = Code formatting and static analysis
deps = -r requirements/static.txt
allowlist_externals = sh
# The first run of pre-commit may reformat files. If this happens, it returns 1 but this
# should not fail the job. So just run again if it fails. A second failure means that
# either the different formatters can't agree on a format or that static analysis failed.
commands = sh -c 'pre-commit run -a || (echo "" && pre-commit run -a)'

[testenv:lib]
description = Run cmake, build the library, and run the C++ tests. May be used for local development, but CI is currently using conda instead.
deps = -r requirements/build.txt
commands =
  cmake --preset base -DCONAN_TBB=ON
  cmake --build --preset build
  ctest --preset test

[testenv:debug]
description = Run cmake, build the library in DEBUG mode, and run the C++ tests.
deps = -r requirements/build.txt
commands =
  cmake --preset debug -DCONAN_TBB=ON
  cmake --build --preset build-debug
  ctest --preset test

[testenv:editable]
description = Setup links for use with an editable install as scikit-build does not directly support this at the moment.
skip_install = true
deps =
allowlist_externals =
  find
  ln
commands =
  find install/scipp -type f -name '_scipp*.so' -exec ln -s ../../\{\} -t src/scipp \;
  ln -s ../install/lib/ -t src

[testenv:coverage]
deps = -r requirements/coverage.txt
commands = python -m pytest --cov=scipp --cov-report html:coverage_html/python .

[testenv:asv]
deps = -r requirements/asv.txt
commands =
  asv machine --machine cloud-container --os "Ubuntu" --arch 'x86_64' --cpu "2 Core CPU" --num_cpu 2 --ram '7GB'
  asv update
  asv run -v -m cloud-container -e --environment existing:python --set-commit-hash HEAD
  asv publish

[testenv:deps]
description = Update dependencies by running pip-compile-multi
deps = pip-compile-multi
skip_install = true
changedir = requirements
commands = pip-compile-multi -d . --backtracking

[testenv:prepare-release]
description = Run before a release. Pass the release version as a positional argument.
skip_install = true
deps =
allowlist_externals = sh
commands =
  sh -c 'git grep -rl RELEASE_PLACEHOLDER docs/ src/scipp | xargs sed -i "s/RELEASE_PLACEHOLDER/{posargs}/g"'

[testenv:check-release]
description = Check if a release can be made.
skip_install = true
deps =
allowlist_externals = sh
commands =
  sh -c '! git grep -rl RELEASE_PLACEHOLDER docs/ src/scipp'

[testenv:nightlydeps]
description = Test using nightly versions of dependencies
deps = -r requirements/test.in
pip_pre = true
setenv =
  PYTHONPATH = {toxinidir}{/}install
  JUPYTER_PLATFORM_DIRS = 1
  PIP_INDEX_URL = {env:PIP_INDEX_URL:https://pypi.anaconda.org/scientific-python-nightly-wheels/simple}
  PIP_EXTRA_INDEX_URL = {env:PIP_EXTRA_INDEX_URL:https://pypi.org/simple}
commands = python -X PYTHONWARNDEFAULTENCODING -m pytest -n auto -v {posargs:tests}

[testenv:mypy]
description = Type checking (mypy)
deps = -r requirements/mypy.txt
setenv =
  PYTHONPATH = {toxinidir}{/}install
; Exclude src because we test the installed package, not the source tree.
; Without the exclude, mypy would complain about duplicate packages.
commands = python -m mypy . --exclude '^src/'
