name: Release

on:
  release:
    types: [published]
  workflow_dispatch:

defaults:
  run:
    shell: bash -l {0}  # required for conda env

jobs:
  check_release:
    name: Check if package can be released
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      - run: python -m pip install --upgrade pip
      - run: python -m pip install -r requirements/ci.txt
      - run: tox -e check-release
        if: github.event_name == 'release' && github.event.action == 'published'

  build_conda:
    name: Package build (${{ matrix.variant.target }}, py${{ matrix.python-version }})
    needs: check_release
    runs-on: ${{ matrix.variant.os }}
    strategy:
      matrix:
        variant:
          - {os: ubuntu-20.04, target: linux_64}
          - {os: macos-11, target: osx_64}
          - {os: macos-11, target: osx_arm64}
          - {os: windows-2019, target: win_64}
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0  # history required so cmake can determine version

      - uses: conda-incubator/setup-miniconda@v2
      - run: >
          conda install
          --channel conda-forge
          --channel nodefaults
          --yes
          conda-build conda-forge-pinning
      - run: >
          conda build
          --channel conda-forge
          --variant-config-files=${CONDA_PREFIX}/conda_build_config.yaml
          --variant-config-files=${GITHUB_WORKSPACE}/conda/variants/${{ matrix.variant.target }}.yaml
          --python="${{ matrix.python-version }}.* *_cpython"
          --no-anaconda-upload
          --override-channels
          --output-folder conda/package conda

      - uses: actions/upload-artifact@v3
        with:
          name: conda-package-${{ matrix.variant.os }}-py${{ matrix.python-version }}
          path: conda/package/*/scipp*.tar.bz2

  # build_sdist:
  #   name: Build SDist
  #   needs: check_release
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #       fetch-depth: 0  # history required so cmake can determine version

  #   - name: Build SDist
  #     run: pipx run build --sdist

  #   - name: Check metadata
  #     run: pipx run twine check dist/*

  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: dist
  #       path: dist/*.tar.gz

  # build_wheels:
  #   name: Wheels on ${{ matrix.os }}-${{ matrix.build }}
  #   needs: check_release
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-20.04, macos-11, windows-2019]
  #       build: [cp38, cp39, cp310, cp311]

  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #       fetch-depth: 0  # history required so cmake can determine version

  #   - uses: pypa/cibuildwheel@v2.13.0
  #     env:
  #       CIBW_BUILD: ${{ matrix.build }}-*
  #       MACOSX_DEPLOYMENT_TARGET: "10.15"

  #   - name: Verify clean directory
  #     run: git diff --exit-code
  #     shell: bash

  #   - name: Upload wheels
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: dist
  #       path: wheelhouse/*.whl

  # upload_pypi:
  #   name: Deploy PyPI
  #   needs: [build_wheels, build_sdist, build_conda]
  #   runs-on: ubuntu-20.04
  #   if: github.event_name == 'release' && github.event.action == 'published'

  #   steps:
  #     - uses: actions/download-artifact@v3
  #     - uses: actions/setup-python@v3
  #     - uses: pypa/gh-action-pypi-publish@v1.8.6
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_TOKEN }}

  upload_conda:
    name: Deploy Conda Forge
    needs: [build_conda]
    # needs: [build_wheels, build_sdist, build_conda]
    runs-on: ubuntu-20.04
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: '3.8'
      - run: conda install -c conda-forge --yes anaconda-client
      - run: anaconda --token ${{ secrets.ANACONDATOKEN }} upload --user scipp --label main $(ls conda-package-*/*/*.tar.bz2)

  manage-versions:
    name: Manage Versions
    needs: check_release
    runs-on: ubuntu-20.04
    outputs:
      version-new: ${{ steps.version.outputs.new }}
      version-replaced: ${{ steps.version.outputs.replaced }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # history required so cmake can determine version
      - uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      - run: python -m pip install --upgrade pip
      - run: python -m pip install -r requirements/ci.txt
      - name: Set outputs
        id: version
        run: |
          echo "new=$(python docs/version.py --version=${GITHUB_REF_NAME} --action=is-new)" >> $GITHUB_OUTPUT
          echo "replaced=$(python docs/version.py --version=${GITHUB_REF_NAME} --action=get-replaced)" >> $GITHUB_OUTPUT

  docs:
    needs: [upload_conda, manage-versions]
    # needs: [upload_conda, upload_pypi, manage-versions]
    uses: ./.github/workflows/docs.yml
    with:
      publish: ${{ github.event_name == 'release' && github.event.action == 'published' }}
      version: ${{ github.ref_name }}
    secrets: inherit

  replaced-docs:
    needs: docs
    if: github.event_name == 'release' && github.event.action == 'published' && needs.manage-versions.outputs.version-new == 'True'
    uses: ./.github/workflows/docs.yml
    with:
      publish: true
      version: ${{ needs.manage-versions.outputs.version-replaced }}
      branch: ${{ needs.manage-versions.outputs.version-replaced }}
    secrets: inherit
